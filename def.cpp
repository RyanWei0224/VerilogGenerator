#include "mainwindow.h"

const QString MainWindow::header=
"`define EOF -1\n"
"`define NULL 0\n"
"`timescale 1ps/1ps";

const QString MainWindow::params=
"	parameter *PARAM*=4;\n"
"	parameter CYCLE=20;\n"
"	parameter HALF_CYCLE=CYCLE/2;\n"
"	parameter INFILE=\"x.dat\";\n"
"	parameter OUTFILE=\"out.dat\";\n"
"	parameter STRLEN=640;";

const QString MainWindow::content=
"	//Module starts here... example below:\n"
"	//Needs to change *PARAM*, in_x, ou_freg and length/sign of correct_out\n"
"	integer               *BLANK* DELAY_CYC=2;\n"
"	integer               *BLANK* DELAY;\n"
"	integer               *BLANK* fd_in=0;\n"
"	integer               *BLANK* fd_out=0;\n"
"	reg         [STRLEN:1]*BLANK* fmt_str_in;\n"
"	reg         [STRLEN:1]*BLANK* fmt_str_out;\n"
"	reg  signed [*PARAM*-1:0]*BLANK2* correct_out;\n"
"	reg                   *BLANK* in_finish;\n"
"	reg                   *BLANK* out_finish;\n"
"	\n"
"	task exit;\n"
"	begin\n"
"		if(fd_in)\n"
"			$fclose(fd_in);\n"
"		if(fd_out)\n"
"			$fclose(fd_out);\n"
"		$stop;\n"
"		$finish;\n"
"	end\n"
"	endtask\n"
"	\n"
"	task open_err;\n"
"		input integer fd;\n"
"		input [STRLEN:1] FILE;\n"
"		integer err_code;\n"
"		reg [STRLEN:1] err_str;\n"
"	begin\n"
"		err_code=$ferror(fd,err_str);\n"
"		$display(\"Error(%0d) opening file %0s:\\n%0s\",err_code,FILE,err_str);\n"
"		exit();\n"
"	end\n"
"	endtask\n"
"	\n"
"	task read_err;\n"
"		input [STRLEN:1] FILE;\n"
"	begin\n"
"		$display(\"Error reading file %0s\",FILE);\n"
"		exit();\n"
"	end\n"
"	endtask\n"
"	\n"
"	\n"
"	\n"
"	initial begin\n"
"		in_clk<=1'b0;\n"
"		in_rst<=1'b0;\n"
"		in_finish<=1'b0;\n"
"		out_finish<=1'b0;\n"
"		#CYCLE;\n"
"		in_rst<=1'b1;\n"
"		while(!(in_finish&&out_finish)) begin\n"
"			#HALF_CYCLE; in_clk<=~in_clk;\n"
"		end\n"
"		$display(\"Testbench ended successfully, find no mistakes.\");\n"
"		exit();\n"
"	end\n"
"	\n"
"	initial begin\n"
"		fd_in=$fopen(INFILE,\"r\");\n"
"		if(fd_in==`NULL) begin\n"
"			open_err(fd_in,INFILE);\n"
"		end\n"
"		$sformat(fmt_str_in,\"%%%0dd\",*PARAM*);\n"
"		#CYCLE;\n"
"		begin : in_break\n"
"			forever begin\n"
"				case($fscanf(fd_in,fmt_str_in,in_x))\n"
"					1: begin\n"
"						#CYCLE;\n"
"					end\n"
"					`EOF: begin\n"
"						disable in_break;\n"
"					end\n"
"					default: begin\n"
"						read_err(INFILE);\n"
"					end\n"
"				endcase\n"
"			end\n"
"		end\n"
"		$display(\"Input has finished...\");\n"
"		in_finish<=1'b1;\n"
"	end\n"
"	\n"
"	initial begin\n"
"		fd_out=$fopen(OUTFILE,\"r\");\n"
"		if(fd_out==`NULL) begin\n"
"			open_err(fd_out,OUTFILE);\n"
"		end\n"
"		$fscanf(fd_out,\"DELAY = %d\",DELAY_CYC);\n"
"		DELAY=DELAY_CYC*CYCLE;\n"
"		#CYCLE;\n"
"		#DELAY;\n"
"		$sformat(fmt_str_out,\"%%%0dd\",*PARAM*);\n"
"		begin : out_break\n"
"			forever begin\n"
"				case($fscanf(fd_out,fmt_str_out,correct_out))\n"
"					1: begin\n"
"						if(correct_out!=ou_freg) begin\n"
"							$display(\"Output is incorrect:\");\n"
"							$display(\"Output: %0d\",ou_freg);\n"
"							$display(\"Should be: %0d\",correct_out);\n"
"							exit();\n"
"						end\n"
"						#CYCLE;\n"
"					end\n"
"					`EOF: begin\n"
"						disable out_break;\n"
"					end\n"
"					default: begin\n"
"						read_err(OUTFILE);\n"
"					end\n"
"				endcase\n"
"			end\n"
"		end\n"
"		$display(\"Output has finished...\");\n"
"		out_finish<=1'b1;\n"
"	end";

const QString MainWindow::paramsNoClk=
"	parameter *PARAM*=4;\n"
"	parameter INFILE=\"x.dat\";\n"
"	parameter OUTFILE=\"out.dat\";\n"
"	parameter STRLEN=640;";

const QString MainWindow::contentNoClk=
"	//Module starts here... example below:\n"
"	//Needs to change *PARAM*, in_x, ou_f and length/sign of correct_out\n"
"	integer               *BLANK* DELAY=10;\n"
"	integer               *BLANK* fd_in=0;\n"
"	integer               *BLANK* fd_out=0;\n"
"	reg         [STRLEN:1]*BLANK* fmt_str_in;\n"
"	reg         [STRLEN:1]*BLANK* fmt_str_out;\n"
"	reg  signed [*PARAM*-1:0]*BLANK2* correct_out;\n"
"	\n"
"	task exit;\n"
"	begin\n"
"		if(fd_in)\n"
"			$fclose(fd_in);\n"
"		if(fd_out)\n"
"			$fclose(fd_out);\n"
"		$stop;\n"
"		$finish;\n"
"	end\n"
"	endtask\n"
"	\n"
"	task open_err;\n"
"		input integer fd;\n"
"		input [STRLEN:1] FILE;\n"
"		integer err_code;\n"
"		reg [STRLEN:1] err_str;\n"
"	begin\n"
"		err_code=$ferror(fd,err_str);\n"
"		$display(\"Error(%0d) opening file %0s:\\n%0s\",err_code,FILE,err_str);\n"
"		exit();\n"
"	end\n"
"	endtask\n"
"	\n"
"	task read_err;\n"
"		input [STRLEN:1] FILE;\n"
"	begin\n"
"		$display(\"Error reading file %0s\",FILE);\n"
"		exit();\n"
"	end\n"
"	endtask\n"
"	\n"
"	\n"
"	\n"
"	initial begin\n"
"		fd_in=$fopen(INFILE,\"r\");\n"
"		if(fd_in==`NULL) begin\n"
"			open_err(fd_in,INFILE);\n"
"		end\n"
"		fd_out=$fopen(OUTFILE,\"r\");\n"
"		if(fd_out==`NULL) begin\n"
"			open_err(fd_out,OUTFILE);\n"
"		end\n"
"		$fscanf(fd_out,\"DELAY = %d\",DELAY);\n"
"		$sformat(fmt_str_in,\"%%%0dd\",*PARAM*);\n"
"		$sformat(fmt_str_out,\"%%%0dd\",*PARAM*);\n"
"		begin : in_break\n"
"			forever begin\n"
"				case($fscanf(fd_in,fmt_str_in,in_x))\n"
"					1: begin\n"
"						// Nothing here...\n"
"					end\n"
"					`EOF: begin\n"
"						disable in_break;\n"
"					end\n"
"					default: begin\n"
"						read_err(INFILE);\n"
"					end\n"
"				endcase\n"
"				case($fscanf(fd_out,fmt_str_out,correct_out))\n"
"					1: begin\n"
"						#DELAY;\n"
"						if(correct_out!=ou_f) begin\n"
"							$display(\"Output is incorrect:\");\n"
"							$display(\"Output: %0d\",ou_f);\n"
"							$display(\"Should be: %0d\",correct_out);\n"
"							exit();\n"
"						end\n"
"					end\n"
"					`EOF: begin\n"
"						$display(\"Warning: Output is shorter than input!\");\n"
"						exit();\n"
"					end\n"
"					default: begin\n"
"						read_err(OUTFILE);\n"
"					end\n"
"				endcase\n"
"			end\n"
"		end\n"
"		$display(\"Testbench ended successfully, find no mistakes.\");\n"
"		exit();\n"
"	end";
