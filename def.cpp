#include "mainwindow.h"

/* Defined macros:
 * -Global:
 *     *FILE*: the file name
 *     *MODULE*: the module name
 *
 * -params:
 *     *PBLANK*: align with the definition of user-defined params
 * -checkNeq:
 *     *ANS_OUT*: correct output from the .dat file
 *     *REAL_OUT*: output of the module
 * -content:
 *     *ANS_OUT_DEF*: the definition of correct outputs ("reg ans_xxx;")
 *     *BLANK*: align with *ANS_OUT_DEF*
 *     *IN_STR*: (%xd %yd ...)
 *     *IN_VARS*: (module_in_xxx, ...)
 *     *IN_NUM*: number of inputs
 *     *OUT_STR*: (%xd %yd ...)
 *     *OUT_VARS*: (module_out_xxx, ...)
 *     *OUT_NUM*: number of outputs
 *     *CHECK_NEQUAL*: a list of checkNeq, to check the correctness of the output
 *     *IN/OUT_ST/END*: commented if no IN/OUT from file
 */

QString MainWindow::clkName="clk";

QString MainWindow::moduleContent=
"	//Module starts here... For example:\n"
"	always@(posedge *MODULE*_input_clk or negedge *MODULE*_input_rst) begin\n"
"		if(~*MODULE*_input_rst) begin\n"
"			// Reset here...\n"
"		end else begin\n"
"			// Works done here...\n"
"		end\n"
"	end\n"
"	\n"
"endmodule\n";

QString MainWindow::header=
"`define EOF -1\n"
"`define NULL 0\n"
"`timescale 1ps/1ps\n";

QString MainWindow::params=
"	parameter CYCLE      *PBLANK*= 20;\n"
"	parameter HALF_CYCLE *PBLANK*= CYCLE/2;\n"
"	parameter DELAY_CYC  *PBLANK*= 0;\n"
"	parameter DELAY      *PBLANK*= DELAY_CYC * CYCLE;\n"
"	parameter INFILE     *PBLANK*= \"*FILE*_in.dat\";\n"
"	parameter OUTFILE    *PBLANK*= \"*FILE*_out.dat\";\n"
"	parameter STRLEN     *PBLANK*= 640;\n";

QString MainWindow::checkNeq=
"						if(*REAL_OUT*!=*ANS_OUT*) begin\n"
"							$display(\"Output is incorrect:\");\n"
"							$display(\"Output: %0d\",*REAL_OUT*);\n"
"							$display(\"Should be: %0d\",*ANS_OUT*);\n"
"							exit();\n"
"						end\n";

QString MainWindow::content=
"	integer *BLANK*fd_in     = 0;\n"
"	integer *BLANK*fd_out    = 0;\n"
"	integer *BLANK*read_var;\n"
"	integer *BLANK*write_var;\n"
"	reg     *BLANK*in_finish;\n"
"	reg     *BLANK*out_finish;\n"
"	\n"
"*ANS_OUT_DEF*"
"	\n"
"	task exit;\n"
"	begin\n"
"		if(fd_in)\n"
"			$fclose(fd_in);\n"
"		if(fd_out)\n"
"			$fclose(fd_out);\n"
"		$stop;\n"
"		$finish;\n"
"	end\n"
"	endtask\n"
"	\n"
"	task open_err;\n"
"		input integer fd;\n"
"		input [STRLEN:1] FILE;\n"
"		integer err_code;\n"
"		reg [STRLEN:1] err_str;\n"
"	begin\n"
"		err_code=$ferror(fd,err_str);\n"
"		$display(\"Error(%0d) opening file %0s:\\n%0s\",err_code,FILE,err_str);\n"
"		exit();\n"
"	end\n"
"	endtask\n"
"	\n"
"	task read_err;\n"
"		input integer fd;\n"
"		input [STRLEN:1] FILE;\n"
"		input integer num_read;\n"
"		input integer tot_read;\n"
"		integer err_code;\n"
"		reg [STRLEN:1] err_str;\n"
"	begin\n"
"		$display(\"Error reading file %0s: expected %0d vars, got %0d.\",FILE,tot_read,num_read);\n"
"		err_code=$ferror(fd,err_str);\n"
"		$display(\"Error(%0d) message is:\\n%0s\",err_code,err_str);\n"
"		exit();\n"
"	end\n"
"	endtask\n"
"	\n"
"	\n"
"	\n"
"	initial begin\n"
"		in_clk<=1'b0;\n"
"		in_rst<=1'b0;\n"
"		in_finish<=1'b0;\n"
"		out_finish<=1'b0;\n"
"		#CYCLE;\n"
"		in_rst<=1'b1;\n"
"		while(!(in_finish&&out_finish)) begin\n"
"			#HALF_CYCLE; in_clk<=~in_clk;\n"
"		end\n"
"		$display(\"Testbench ended successfully, find no mistakes.\");\n"
"		exit();\n"
"	end\n"
"	\n"
"	initial begin\n"
"*IN_ST*"
"		fd_in=$fopen(INFILE,\"r\");\n"
"		if(fd_in==`NULL) begin\n"
"			open_err(fd_in,INFILE);\n"
"		end\n"
"		#CYCLE;\n"
"		begin : in_break\n"
"			forever begin\n"
"				read_var = $fscanf(fd_in,\"*IN_STR*\",*IN_VARS*);\n"
"				case(read_var)\n"
"					*IN_NUM*: begin\n"
"						#CYCLE;\n"
"					end\n"
"					`EOF: begin\n"
"						disable in_break;\n"
"					end\n"
"					default: begin\n"
"						read_err(fd_in,INFILE,read_var,*IN_NUM*);\n"
"					end\n"
"				endcase\n"
"			end\n"
"		end\n"
"		$display(\"Input has finished...\");\n"
"*IN_END*"
"		in_finish<=1'b1;\n"
"	end\n"
"	\n"
"	initial begin\n"
"*OUT_ST*"
"		fd_out=$fopen(OUTFILE,\"r\");\n"
"		if(fd_out==`NULL) begin\n"
"			open_err(fd_out,OUTFILE);\n"
"		end\n"
"		#CYCLE;\n"
"		#DELAY;\n"
"		begin : out_break\n"
"			forever begin\n"
"				write_var = $fscanf(fd_out,\"*OUT_STR*\",*OUT_VARS*);\n"
"				case(write_var)\n"
"					*OUT_NUM*: begin\n"
"*CHECK_NEQUAL*"
"						#CYCLE;\n"
"					end\n"
"					`EOF: begin\n"
"						disable out_break;\n"
"					end\n"
"					default: begin\n"
"						read_err(fd_out,OUTFILE,write_var,*OUT_NUM*);\n"
"					end\n"
"				endcase\n"
"			end\n"
"		end\n"
"		$display(\"Output has finished...\");\n"
"*OUT_END*"
"		out_finish<=1'b1;\n"
"	end\n"
"endmodule\n";

QString MainWindow::paramsNoClk=
"	parameter DELAY   *PBLANK*= 10;\n"
"	parameter INFILE  *PBLANK*= \"*FILE*_in.dat\";\n"
"	parameter OUTFILE *PBLANK*= \"*FILE*_out.dat\";\n"
"	parameter STRLEN  *PBLANK*= 640;\n";

QString MainWindow::contentNoClk=
"	integer *BLANK*fd_in  = 0;\n"
"	integer *BLANK*fd_out = 0;\n"
"	integer *BLANK*read_var;\n"
"	integer *BLANK*write_var;\n"
"	\n"
"*ANS_OUT_DEF*"
"	\n"
"	task exit;\n"
"	begin\n"
"		if(fd_in)\n"
"			$fclose(fd_in);\n"
"		if(fd_out)\n"
"			$fclose(fd_out);\n"
"		$stop;\n"
"		$finish;\n"
"	end\n"
"	endtask\n"
"	\n"
"	task open_err;\n"
"		input integer fd;\n"
"		input [STRLEN:1] FILE;\n"
"		integer err_code;\n"
"		reg [STRLEN:1] err_str;\n"
"	begin\n"
"		err_code=$ferror(fd,err_str);\n"
"		$display(\"Error(%0d) opening file %0s:\\n%0s\",err_code,FILE,err_str);\n"
"		exit();\n"
"	end\n"
"	endtask\n"
"	\n"
"	task read_err;\n"
"		input integer fd;\n"
"		input [STRLEN:1] FILE;\n"
"		input integer num_read;\n"
"		input integer tot_read;\n"
"		integer err_code;\n"
"		reg [STRLEN:1] err_str;\n"
"	begin\n"
"		$display(\"Error reading file %0s: expected %0d vars, got %0d.\",FILE,tot_read,num_read);\n"
"		err_code=$ferror(fd,err_str);\n"
"		$display(\"Error(%0d) message is:\\n%0s\",err_code,err_str);\n"
"		exit();\n"
"	end\n"
"	endtask\n"
"	\n"
"	\n"
"	\n"
"	initial begin\n"
"*IN_ST*"
"		fd_in=$fopen(INFILE,\"r\");\n"
"		if(fd_in==`NULL) begin\n"
"			open_err(fd_in,INFILE);\n"
"		end\n"
"*IN_END*"
"*OUT_ST*"
"		fd_out=$fopen(OUTFILE,\"r\");\n"
"		if(fd_out==`NULL) begin\n"
"			open_err(fd_out,OUTFILE);\n"
"		end\n"
"*OUT_END*"
"		begin : in_break\n"
"			forever begin\n"
"*IN_ST*"
"				read_var = $fscanf(fd_in,\"*IN_STR*\",*IN_VARS*);\n"
"				case(read_var)\n"
"					*IN_NUM*: begin\n"
"						// Nothing here...\n"
"					end\n"
"					`EOF: begin\n"
"						disable in_break;\n"
"					end\n"
"					default: begin\n"
"						read_err(fd_in,INFILE,read_var,*IN_NUM*);\n"
"					end\n"
"				endcase\n"
"*IN_END*"
"				#DELAY;\n"
"*OUT_ST*"
"				write_var = $fscanf(fd_out,\"*OUT_STR*\",*OUT_VARS*);\n"
"				case(write_var)\n"
"					*OUT_NUM*: begin\n"
"*CHECK_NEQUAL*"
"					end\n"
"					`EOF: begin\n"
"						$display(\"Warning: Output is shorter than input!\");\n"
"						exit();\n"
"					end\n"
"					default: begin\n"
"						read_err(fd_out,OUTFILE,write_var,*OUT_NUM*);\n"
"					end\n"
"				endcase\n"
"*OUT_END*"
"			end\n"
"		end\n"
"		$display(\"Testbench ended successfully, find no mistakes.\");\n"
"		exit();\n"
"	end\n"
"endmodule\n";
